<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- MVC 리소스 매핑 -->
    <mvc:resources mapping="/image/**" location="/resources/image/" />

    <!-- Component Scan -->
    <context:component-scan base-package="com.shinhan.myapp2,net.firstzone" />

	<!--properties 설정파일의 위치를 지정하기 (1번, 2번 DataSource에서 이용함) -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/spring/oracleDB.properties</value>
				<value>classpath:/application.properties</value>
			</list>
		</property>

		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<!-- sqlSession를 생성해준다.(dataSource,configLocation,mapperLocations) -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis/sqlMapConfig.xml" />
		<property name="mapperLocations"
			value="classpath:mybatis/mappers/*Mapper.xml" />
	</bean>

	<!-- SQL문실행하여 DB객체와 자바객체를 Mapping해준다. -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>




	<!-- 3.JNDI로 Connection Pooling사용하기 context.xml에 설정이 있음 ... Tomcat이 Connection 
		Pooling관리 -->
	<!-- <jee:jndi-lookup id="dataSource" resource-ref="true" jndi-name="jdbc/myoracle"></jee:jndi-lookup> -->


	<bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceOriginal" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"></property>
				<property name="sqlPrefix" value="[SQL문장]"></property>
			</bean>
		</property>
	</bean>
    <!--    
    1.사용자가 Browser요청 ==>
    2.Filter==>FrontController==>Controller==>
    3.Service==>
    4.DAOMybatis==>
    5.sqlSession==>
    6.sqlSessionFactory==>        
    7.dataSource(dataSourceOriginal+log남기는방법)==> 
    8.dataSourceOriginal==>
    9.DB      
    -->
	<!-- 2.Connection Pooling이용하기 -->
	<bean id="dataSourceOriginal"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>


	<!-- 1.DriverManager이용하기 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="${jdbc.driverClassName}" /> <property 
		name="url" value="${jdbc.url}" /> <property name="username" value="${jdbc.username}" 
		/> <property name="password" value="${jdbc.password}" /> </bean> -->
</beans>
